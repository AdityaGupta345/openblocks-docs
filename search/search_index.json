{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenBlocks An open source, modular alternative of Sketchware. Create your own app in android using block programming like scratch! What is OpenBlocks? OpenBlocks is a community-driven modular android application that can create android apps using block programming like scratch. Every components of OpenBlocks are modules, these modules can be loaded and unloaded at runtime, giving users freedom on what they want to do with this app. Create cusomizeable blocks, Custom widgets, Custom manager, Custom project type, Custom everything, Anything you want with it! For Sketchware users... OpenBlocks is basically an app that you can mod easily! It's open source, change what you want, contribute what you want, use what you want! It's also modular, meaning you can create modules to do something else, For example, I want to add a TextInputLayout to my Layout editor, just download an already-existing module that adds TextInputLayout to the layout editor, and boom! That's it, No need to mod sketchware. And if you want to create a module, we have already made an interface for that, check out openblocks-module-interface , the guide is also there, check out it's wiki page . This documentation is open source, you can contribute to it on GitHub . Happy coding!","title":"Home"},{"location":"#what-is-openblocks","text":"OpenBlocks is a community-driven modular android application that can create android apps using block programming like scratch. Every components of OpenBlocks are modules, these modules can be loaded and unloaded at runtime, giving users freedom on what they want to do with this app. Create cusomizeable blocks, Custom widgets, Custom manager, Custom project type, Custom everything, Anything you want with it!","title":"What is OpenBlocks?"},{"location":"#for-sketchware-users","text":"OpenBlocks is basically an app that you can mod easily! It's open source, change what you want, contribute what you want, use what you want! It's also modular, meaning you can create modules to do something else, For example, I want to add a TextInputLayout to my Layout editor, just download an already-existing module that adds TextInputLayout to the layout editor, and boom! That's it, No need to mod sketchware. And if you want to create a module, we have already made an interface for that, check out openblocks-module-interface , the guide is also there, check out it's wiki page . This documentation is open source, you can contribute to it on GitHub . Happy coding!","title":"For Sketchware users..."},{"location":"license/","text":"License BSD 3-Clause License Copyright (c) 2021, OpenBlocks All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"license/#license","text":"BSD 3-Clause License Copyright (c) 2021, OpenBlocks All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"modules/home/","text":"Modules What are modules and what it does? Well you can read it here! What is a module? A module is a piece of code that can be loaded and unloaded at runtime, giving or removing a feature to OpenBlocks. So, there are 5 Important Types of modules in OpenBlocks: (we'll add more soon) - PROJECT_MANAGER : Manages where the projects are located, are written, and are read. - PROJECT_PARSER : Parses files (that you can get from PROJECT_MANAGER ) into a Layout, and Code. - PROJECT_GUI_LAYOUT : Displays a View that allow the user to visualize / edit the layout. - PROJECT_GUI_CODE : Displays a View that allow the user to visualize / edit the Code. - PROJECT_COMPILER : Compiles the Layout and Code into a single ready-to-install APK file. OpenBlocks need atleast one module of each type for it to work as these modules are important. So, yeah, after reading this, OpenBlocks is just a simple structure, where the features came from modules. What's cool with it? You see, Most apps are not dynamic, they just works on how they were built, giving the user have no control of the features / issues of the app. With this modular approach, users can create features as they like, Do what they want!","title":"Modules"},{"location":"modules/home/#modules","text":"What are modules and what it does? Well you can read it here!","title":"Modules"},{"location":"modules/home/#what-is-a-module","text":"A module is a piece of code that can be loaded and unloaded at runtime, giving or removing a feature to OpenBlocks. So, there are 5 Important Types of modules in OpenBlocks: (we'll add more soon) - PROJECT_MANAGER : Manages where the projects are located, are written, and are read. - PROJECT_PARSER : Parses files (that you can get from PROJECT_MANAGER ) into a Layout, and Code. - PROJECT_GUI_LAYOUT : Displays a View that allow the user to visualize / edit the layout. - PROJECT_GUI_CODE : Displays a View that allow the user to visualize / edit the Code. - PROJECT_COMPILER : Compiles the Layout and Code into a single ready-to-install APK file. OpenBlocks need atleast one module of each type for it to work as these modules are important. So, yeah, after reading this, OpenBlocks is just a simple structure, where the features came from modules.","title":"What is a module?"},{"location":"modules/home/#whats-cool-with-it","text":"You see, Most apps are not dynamic, they just works on how they were built, giving the user have no control of the features / issues of the app. With this modular approach, users can create features as they like, Do what they want!","title":"What's cool with it?"},{"location":"modules/making-modules/","text":"So this library is basically a standard to communicate between an openblocks module and the openblocks app itself. Example Code: Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 public class IyxanProjectManager implements OpenBlocksModule . ProjectManager { @Override public int getType () { /* This function is used to indicate what type of module is this? * OpenBlocks need at least 1 module for each type for it to work * * Initial ideas for types would be: * PROJECT_MANAGER: For exporting, saving, restoring, opening projects. Basically on how the projects are stored. * PROJECT_PARSER: To parse project files, this can be used to parse custom formats. This module must have a way to parse LOGIC, and LAYOUT * PROJECT_LAYOUT_VIEW: To render the project's Layout, you can get the layout from using the LAYOUT_PARSER module (we use sketchware-blocks-view for this) * PROJECT_LOGIC_VIEW: To display and edit the project's logic * PROJECT_COMPILER: To compile the LAYOUT and LOGIC into a ready-to-install APK file * * That's currently it, This might expand in the future. * * I have an idea where the layout is also a module :flushed: */ return OpenBlocksModule . Type . PROJECT_MANAGER ; } @Override public void saveProject ( OpenBlocksProject project ) { // OpenBlocksProject contains a list of files that is generated by PROJECT_PARSER, that will need to be saved / managed by the PROJECT_MANAGER // Oh yeah, it also has an ID, which is determined by the PROJECT_PARSER // In this example project manager, we're just going to save the stuff to the /.openblocks/projects/{ID}/ directory String external_dir = Environment . getExternalStorageDirectory (); String project_dir = external_dir + \"/.openblocks/projects/\" + project . getID () + \"/\" ; for ( OpenBlocksFile data : project . files ) { // project.files is an Array List of OpenBlocksFile Util . writeFile ( project_dir data . getName (), data . getData ()); } // This is a very simple example, You can implement stuff like, AES encryption, or maybe a compression, or maybe upload it to cloud, idk, just go crazy with this } @Override public OpenBlocksProject getProject ( String project_id ) { // Here, we're going to get the project OpenBlocksProject output = new OpenBlocksProject (); // Initialize an empty project ArrayList < OpenBlocksFile > files = new ArrayList <> (); // Initialize an empty files // Because we write our files on /.openblocks/projects/{ID}/ directory, we're gonna read from that too. String external_dir = Environment . getExternalStorageDirectory (); String project_dir = external_dir + \"/.openblocks/projects/\" + project_id + \"/\" ; for ( File file : new File (). listDir ()) { files . add ( new OpenBlocksFile ( Util . readFile ( file ), file . getName ())); // Note: Imaginary function Util.readFile returns byte[] } // Finally, save it to the output output . files = files ; // Don't forgot to set the id! output . ID = project_id ; // Aand return it return output ; } @Override public void exportProject ( OpenBlocksProject project ) throws NotSupportedException { // uhhh, let's pretend we don't have plan on making export project, so, well, let's just throw a NotSupportedException, indicating that we don't support exporting projects throw new NotSupportedException ( \"Exporting project in IyxanProjectManager is not supported, please wait for future update\" ); } @Override public OpenBlocksProject importProject () throws NotSupportedException { // uhh, it's the same for import project throw new NotSupportedException ( \"Importing project in IyxanProjectManager is not supported, please wait for future update\" ); } } Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class IyxanProjectManager : OpenBlocksModule . ProjectManager { /* This function is used to indicate what type of module is this? * OpenBlocks need at least 1 module for each type for it to work * * Initial ideas for types would be: * PROJECT_MANAGER: For exporting, saving, restoring, opening projects. Basically on how the projects are stored. * PROJECT_PARSER: To parse project files, this can be used to parse custom formats. This module must have a way to parse LOGIC, and LAYOUT * PROJECT_LAYOUT_VIEW: To render the project's Layout, you can get the layout from using the LAYOUT_PARSER module (we use sketchware-blocks-view for this) * PROJECT_LOGIC_VIEW: To display and edit the project's logic * PROJECT_COMPILER: To compile the LAYOUT and LOGIC into a ready-to-install APK file * * That's currently it, This might expand in the future. * * I have an idea where the layout is also a module :flushed: */ val type : Int get () { return OpenBlocksModule . Type . PROJECT_MANAGER } fun saveProject ( project : OpenBlocksProject ) { // OpenBlocksProject contains a list of files that is generated by PROJECT_PARSER, that will need to be saved / managed by the PROJECT_MANAGER // Oh yeah, it also has an ID, which is determined by the PROJECT_PARSER // In this example project manager, we're just going to save the stuff to the /.openblocks/projects/{ID}/ directory val external_dir = Environment . getExternalStorageDirectory () val project_dir = external_dir + \"/.openblocks/projects/\" + project . getID () + \"/\" for ( data in project . files ) { // project.files is an Array List of OpenBlocksFile Util . writeFile ( project_dir , , data . getName (), data . getData ()) } // This is a very simple example, You can implement stuff like, AES encryption, or maybe a compression, or maybe upload it to cloud, idk, just go crazy with this } fun getProject ( project_id : String ): OpenBlocksProject { // Here, we're going to get the project val output = OpenBlocksProject () // Initialize an empty project val files = ArrayList () // Initialize an empty files // Because we write our files on /.openblocks/projects/{ID}/ directory, we're gonna read from that too. val external_dir = Environment . getExternalStorageDirectory () val project_dir = external_dir + \"/.openblocks/projects/\" + project_id + \"/\" for ( file in File (). listDir ()) { files . add ( OpenBlocksFile ( Util . readFile ( file ), file . getName ())) // Note: Imaginary function Util.readFile returns byte[] } // Finally, save it to the output output . files = files // Don't forgot to set the id! output . ID = project_id // Aand return it return output } @Throws ( NotSupportedException :: class ) fun exportProject ( project : OpenBlocksProject ) { // uhhh, let's pretend we don't have plan on making export project, so, well, let's just throw a NotSupportedException, indicating that we don't support exporting projects throw NotSupportedException ( \"Exporting project in IyxanProjectManager is not supported, please wait for future update\" ) } @Throws ( NotSupportedException :: class ) fun importProject (): OpenBlocksProject { // uhh, it's the same for import project throw NotSupportedException ( \"Importing project in IyxanProjectManager is not supported, please wait for future update\" ) } } // Converted using a java to kotlin converter, if there is something wrong please somebody fix it! So, If you want to deploy this code, you can do this: Compile it as an APK Rename the APK extension to be a JAR file Create a file named openblocks-module-manifest.json , edit and put this code: 1 2 3 4 5 6 7 8 { \"name\" : \"IyxanProjectManager\" , \"description\" : \"Iyxan's personal project manager\" , \"classpath\" : \"com.iyxan23.project.manager.IyxanProjectManager\" , \"version\" : 1 , \"lib_version\" : 1 , \"type\" : \"PROJECT_MANAGER\" } Zip all of those files (JAR, and the openblocks-module-manifest.json ) into 1 zip file Then load it on the OpenBlocks App More information: https://stackoverflow.com/a/25748704/9613353 , https://stackoverflow.com/a/6860579/9613353","title":"Making modules"}]}